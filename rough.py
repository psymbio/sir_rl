        plt.figure(figsize=(12, 8))
        plt.plot(self.df['date'], self.df['S']/self.df['N'], color="#006EAE", alpha=0.5, lw=2, label='Susceptible (actual)')
        plt.plot(self.df['date'], self.df['I']/self.df['N'], color="#C5373D", alpha=0.5, lw=2, label='Infected (actual)')
        plt.plot(self.df['date'], self.df['R']/self.df['N'], color="#429130", alpha=0.5, lw=2, label='Recovered (actual)')
        plt.plot(self.df['date'], self.df['S_modelled_' + modelling_type]/self.N, color="#006EAE", linestyle=':', alpha=0.5, lw=2, label='Susceptible (modelled)')
        plt.plot(self.df['date'], self.df['I_modelled_' + modelling_type]/self.N, color="#C5373D", linestyle=':', alpha=0.5, lw=2, label='Infected (modelled)')
        plt.plot(self.df['date'], self.df['R_modelled_' + modelling_type]/self.N, color="#429130", linestyle=':', alpha=0.5, lw=2, label='Recovered (modelled)')
        plt.plot(self.df['date'], self.df['S_moves']/self.N, color="#006EAE", linestyle='--', alpha=0.5, lw=2, label='Susceptible (rl)')
        plt.plot(self.df['date'], self.df['I_moves']/self.N, color="#C5373D", linestyle='--', alpha=0.5, lw=2, label='Infected (rl)')
        plt.plot(self.df['date'], self.df['R_moves']/self.N, color="#429130", linestyle='--', alpha=0.5, lw=2, label='Recovered (rl)')
        plt.xlabel('Date')
        plt.ylabel('Percentage of Population')
        plt.title('SIR Epidemic Trajectory')
        plt.tick_params(length=0)
        plt.grid(True)
        plt.legend()
        plt.savefig(os.path.join(output_path_img, "rl_sir.png"))
        plt.savefig(os.path.join(output_path_img, "rl_sir.eps"))

        plt.figure(figsize=(12, 8))
        plt.plot(self.df['date'], self.df['I']/self.df['N'], color="#C5373D", alpha=0.5, lw=2, label='Infected (actual)')
        plt.plot(self.df['date'], self.df['I_modelled_' + modelling_type]/self.N, color="#006EAE", linestyle=":", alpha=0.5, lw=2, label='Infected (modelled)')
        plt.plot(self.df['date'], self.df['I_moves']/self.N, color="#429130", linestyle="--", alpha=0.5, lw=2, label='Infected (rl)')
        plt.xlabel("Date")
        plt.ylabel("Percentage of Infected Population")
        plt.title("SIR Epidemic Trajectory (Infected)")
        plt.grid(True)
        plt.legend()
        plt.savefig(os.path.join(output_path_img, "rl_i.png"))
        plt.savefig(os.path.join(output_path_img, "rl_i.eps"))

        plt.figure(figsize=(12, 8))
        plt.plot(self.df['date'], self.df['stringency_index'], color="#006EAE", label="Stringency (actual)")
        plt.plot(self.df['date'], stringency, color="#429130", label="Stringency (rl)")
        plt.xlabel("Date")
        plt.ylabel("Stringency Index")
        plt.title("Stringency over Time")
        plt.grid(True)
        plt.legend()
        plt.savefig(os.path.join(output_path_img, "rl_stringency.png"))
        plt.savefig(os.path.join(output_path_img, "rl_stringency.eps"))

        plt.figure(figsize=(12, 8))
        plt.plot(self.df['date'], self.df['gdp_normalized'], color="#C5373D", label="GDP normalized (actual)")
        plt.plot(self.df['date'], self.df['gdp_normalized_modelled'], color="#006EAE", label="GDP normalized (modelled)")
        plt.plot(self.df['date'], self.df['gdp_normalized_moves'], color="#429130", label="GDP normalized (rl)")
        plt.xlabel("Date")
        plt.ylabel("GDP")
        plt.title("GDP over Time")
        plt.grid(True)
        plt.legend()
        plt.savefig(os.path.join(output_path_img, "rl_gdp.png"))
        plt.savefig(os.path.join(output_path_img, "rl_gdp.eps"))

        first_time_r_eff_actual_1 = next((t for t, r_eff in zip(self.df['date'], self.df['r_eff_actual_' + modelling_type]) if r_eff <= 1), None)
        first_time_r_eff_modelled_1 = next((t for t, r_eff in zip(self.df['date'], self.df['r_eff_modelled_' + modelling_type]) if r_eff <= 1), None)
        first_time_r_eff_1 = next((t for t, r_eff in zip(self.df['date'], self.df["r_eff_moves_" + modelling_type]) if r_eff <= 1), None)

        plt.figure(figsize=(12, 8))
        plt.plot(self.df['date'], self.df['r_eff_actual_' + modelling_type], color="#C5373D", label="R_eff (actual)")
        plt.plot(self.df['date'], self.df['r_eff_modelled_' + modelling_type], color="#006EAE", label="R_eff (modelled)")
        plt.plot(self.df['date'], self.df["r_eff_moves_" + modelling_type], color="#429130", label="R_eff (rl)")
        plt.xlabel("Date")
        plt.ylabel("R_eff")
        plt.title("R_eff over Time")
        plt.grid(True)
        legend = plt.legend()
        legend.get_texts()[0].set_text(f'R_eff (actual); R_eff=1 at {first_time_r_eff_actual_1}')
        legend.get_texts()[1].set_text(f'R_eff (modelled); R_eff=1 at {first_time_r_eff_modelled_1}')
        legend.get_texts()[2].set_text(f'R_eff (rl); R_eff=1 at {first_time_r_eff_1}')
        plt.savefig(os.path.join(output_path_img, "rl_r_eff.png"))
        plt.savefig(os.path.join(output_path_img, "rl_r_eff.eps"))

        # print("len df", len(calculate_reward_weighted(self.df["gdp_min_max_normalized"], self.df["r_eff_actual_" + modelling_type])))

        plt.figure(figsize=(12, 8))
        plt.plot(self.df['date'], reward_actual, color="#C5373D", label=f"Reward (actual) Total: {reward_actual.sum():.2f}")
        plt.plot(self.df['date'], reward_modelled, color="#006EAE", label=f"Reward (modelled) Total: {reward_modelled.sum():.2f}")
        plt.plot(self.df['date'], reward_moves, color="#429130", label=f"Reward (rl) Total: {reward_moves.sum():.2f}")
        plt.xlabel("Time /days")
        plt.ylabel("Reward")
        plt.title("Reward over Time")
        plt.grid(True)
        plt.legend()
        plt.savefig(os.path.join(output_path_img, "rl_reward.png"))
        plt.savefig(os.path.join(output_path_img, "rl_reward.eps"))